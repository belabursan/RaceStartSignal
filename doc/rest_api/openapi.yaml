openapi: "3.1.0"
info:
  title: SailRaceSignalAPI
  contact:
    email: burszan@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2.8.0"
# TODO: set later....
#  servers:
#  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: "User operations"
  - name: signal
    description: "Everything about the signal"
#------------------------------------------------------------------------------------------
paths:
#------------------------------------------------------------------------------------------
#        U S E R
#------------------------------------------------------------------------------------------
  /user{email}:
    post:
      tags: ["user"]
      summary: "Register/create a new user on the SailRaceSignal server"
      security: []   # No security
      parameters:
        - name: email
          in: path
          description: "E-mail of user to register"
          required: true
          schema:
            type: string
            format: email
      responses:
        '201':
          description: "Created"
          content:
            text/plain:
              schema:
                description: "User Id, e.g.: 12"
                type: integer
        '400':
          description: "Invalid data, missing something?"
        '409':
          description: "Already registered"
        '500':
          description: "Mail service down"
        '503':
          $ref: '#/components/responses/ServerBusy'
  /user/login:
    post:
      tags: ["user"]
      summary: "Login as registered user to the SailRaceSignal server"
      security: []   # No security
      requestBody:
        description: "Login info, which is email and password"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
        required: true
      responses:
        '200':
          description: "OK"
          content:
            text/plain:
              schema:
                description: "8721dab27ec8df21fa4ec31d997f2ac6, JWT Token, including the user id as primary key in the db"
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
#------------------------------------------------------------------------------------------
#       S I G N A L
#------------------------------------------------------------------------------------------
  /signal:
    put:
      tags: ["signal"]
      summary: "Add signal info to server"
      requestBody:
        description: "Signal information"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signal'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    get:
      tags: ["signal"]
      summary: "Get all signals info from the server"
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  - $ref: '#/components/schemas/Signal'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /signal{id}:
    delete:
      tags: ["signal"]
      summary: "Removes a signal from the database"
      parameters:
        - name: id
          in: path
          description: "Id of the signal"
          required: true
          schema:
            type: integer
  /signal{filter}:
    get:
      tags: ["signal"]
      summary: "Get filtered signals from the server"
      parameters:
        - name: filter
          in: path
          description: "Filter signals to get"
          required: true
          schema:
            type: string
            format: text
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  - $ref: '#/components/schemas/Signal'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'

#------------------------------------------------------------------------------------------
# COMPONENTS
#------------------------------------------------------------------------------------------
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    LoginInfo:
      type: object
      properties:
        email:
          type: string
          description: "helllo@world.com"
        password:
          type: string
          description: "the password"
    Signal:
      type: object
      properties:
        id:
          type: integer
          description: "empty when addind or db-id when receiving"
          default: 0
        date_time:
          type: string
          description: "2025-03-15 19:00"
        one_minute:
          type: boolean
          description: "true or false"
          default: true
        four_minute:
          type: boolean
          description: "true or false"
          default: true
        five_minute:
          type: boolean
          description: "true or false"
          default: true
  responses:
    UnauthorizedError:
      description: "Access token is missing or invalid"
    ServerBusy:
      description: "Server busy, please try again later"
security:
  - bearerAuth: []         # use the same name as above

#https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml
#https://editor-next.swagger.io/
