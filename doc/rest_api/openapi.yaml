openapi: "3.1.0"
info:
  title: SailRaceAPI
  contact:
    email: burszan@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2.8.0"
# TODO: set later....
#  servers:
#  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: "Operations about user"
  - name: boat
    description: "Everything about the boat"
  - name: race
    description: "Operations about the race"
  - name: admin
    description: "Handles admin stuff as setting the race course"
  - name: sysadmin
    description: "System administrator stuff"
  - name: season
    description: season stuff, for showing result and such
#------------------------------------------------------------------------------------------
paths:
#------------------------------------------------------------------------------------------
#        U S E R
#------------------------------------------------------------------------------------------
  /user:
    get:
      tags: ["user"]
      summary: "Get user info from the SailRace server"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: "Not found, registered?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    put:
      tags: ["user"]
      summary: "Update a user on the SailRace server"
      requestBody:
        description: "User and login info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '200':
          description: "OK"
        '400':
          description: "Bad data to set"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    post:
      tags: ["user"]
      summary: "Register/create a new user on the SailRace server"
      description: |
        INSERT INTO user_info (name, email, phone, salt) VALUES (:name, :email, :phone, :salt)
      security: []   # No security
      requestBody:
        description: "User and login info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '201':
          description: "Created"
          content:
            text/plain:
              schema:
                description: "User Id, e.g.: 12"
                type: integer
        '400':
          description: "Invalid data, missing something?"
        '409':
          description: "Already registered"
        '500':
          description: "Mail service down"
        '503':
          $ref: '#/components/responses/ServerBusy'
    delete:
      tags: ["user"]
      summary: "Deletes an user from the server. Note: user_id is read from token."
      description: |
        DELETE FROM user_info WHERE id=`id`
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: "Already deleted"
        '503':
          $ref: '#/components/responses/ServerBusy'
  /user/login:
    post:
      tags: ["user"]
      summary: "Login as registered user to the SailRace server"
      security: []   # No security
      requestBody:
        description: "Login info, which is email and password"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
        required: true
      responses:
        '200':
          description: "OK"
          content:
            text/plain:
              schema:
                description: "8721dab27ec8df21fa4ec31d997f2ac6, JWT Token, including the user id as primary key in the db"
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /user/reset{email}:
    post:
      tags: ["user"]
      summary: "Reset password, new pass sends to email address"
      security: []   # No security
      parameters:
        - name: email
          in: path
          description: "E-mail of user to reset password for"
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, wrong email?"
        '503':
          $ref: '#/components/responses/ServerBusy'
#------------------------------------------------------------------------------------------
#       B O A T
#------------------------------------------------------------------------------------------
  /boat:
    put:
      tags: ["boat"]
      summary: "Update boat info on server"
      description: |
        INSERT INTO boat_info(user_id, type, name, sail_number, srs_shorthand_no_spin,\
         srs_shorthand, srs_no_spin, srs, skipper_name) \
        VALUES (:user_id, :type, :name, :sail_number, :srs_shorthand_no_spin,\
         :srs_shorthand, :srs_no_spin, :srs, :skipper_name)
      requestBody:
        description: "Boat information"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoatInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    get:
      tags: ["boat"]
      summary: "Get boat info from the server"
      description: |
        SELECT * FROM boat_info WHERE  user_id=`user_id`
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BoatInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
#------------------------------------------------------------------------------------------
#           R A C E
#------------------------------------------------------------------------------------------
  /race/headers/{year}{harbor}:
    get:
      tags: ["race"]
      summary: "Get a list of races from the server"
      parameters:
        - name: year
          in: path
          description: "Get races for defined year"
          required: true
          schema:
            type: integer
            format: int64
        - name: harbor
          in: path
          description: "Get races for defined harbor"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RaceHeader'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/{race_id}:
    get:
      tags: ["race"]
      summary: "Get a more detailed race description specified by the race id from the server"
      parameters:
        - name: race_id
          in: path
          description: "ID of race to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Race'
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/joined:
    get:
      tags: ["race"]
      summary: "Returns a list of all races the caller has joined"
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RaceHeader'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/join:
    post:
      tags: ["race"]
      summary: "Join a race defined by the race id"
      requestBody:
        description: "Join info, which is race id and srs-type: shorthand or not, spinnaker or not"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, wrong race id?"
        '405':
          description: "Not allowed, race not joinable?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/exit/{race_id}:
    post:
      tags: ["race"]
      summary: "Exit a race defined by the race id"
      parameters:
        - name: race_id
          in: path
          description: "ID of race to exit"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, wrong race id?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/status/{race_id}:
    get:
      tags: ["race"]
      summary: "Get the status of the race specified by race id"
      parameters:
        - name: race_id
          in: path
          description: "ID of race to to get the status for"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: "Invalid data, wrong race id?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/report/starttime:
    post:
      tags: ["race"]
      summary: "Send the boats start time to the server"
      requestBody:
        description: "Starting time of the boat"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/report/stoptime:
    post:
      tags: ["race"]
      summary: "Send the boats stop time to the server"
      requestBody:
        description: "End time of the boat"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /race/result{race_id}:
    get:
      tags: ["race"]
      summary: "Get the result for the race specified by race id"
      parameters:
        - name: race_id
          in: path
          description: "ID of race to to get the status for"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RaceResult'
        '400':
          description: "Invalid data, wrong race id?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'

#------------------------------------------------------------------------------------------
#               S Y S A D M I N
#------------------------------------------------------------------------------------------
  /sysadmin/user/role:
    post:
      tags: ["sysadmin"]
      summary: "Change user role"
      requestBody:
        description: "User to change role for and role to change to"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInfo'
        required: true
      responses:
        '201':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /sysadmin/race:
    post:
      tags: ["sysadmin"]
      summary: "Register a new race"
      requestBody:
        description: "Race to register on the server"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceIn'
        required: true
      responses:
        '201':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: "Already registered"
        '503':
          $ref: '#/components/responses/ServerBusy'
  /sysadmin/race/{race_id}:
    delete:
      tags: ["sysadmin"]
      summary: "Deletes an race from the server"
      parameters:
        - name: race_id
          in: path
          description: "ID of race to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: "Already deleted"
        '503':
          $ref: '#/components/responses/ServerBusy'
  /sysadmin/startline:
    get:
      tags: ["sysadmin"]
      summary: "Get a list of all startlines from the server"
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/StartLineInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    post:
      tags: ["sysadmin"]
      summary: "Create a new startline on the server"
      requestBody:
        description: "Json containing the new startline info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartLineInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /sysadmin/startline({startline_id}):
    get:
      tags: ["sysadmin"]
      summary: "Get the specified startline from the server"
      parameters:
        - name: startline_id
          in: path
          description: "ID of startline to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartLineInfo'
        '400':
          description: "Not found"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    put:
      tags: ["sysadmin"]
      summary: "Update a startline on the server"
      parameters:
        - name: startline_id
          in: path
          description: "ID of startline to update"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: "Json containing the startline info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartLineInfo'
        required: true
      responses:
        '201':
          description: "Operation successfull"
        '409':
          description: "Already registered"
        '503':
          $ref: '#/components/responses/ServerBusy'
    delete:
      tags: ["sysadmin"]
      summary: "Deletes a startline from the server"
      parameters:
        - name: startline_id
          in: path
          description: "ID of startline to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /sysadmin/harbor:
    get:
      tags: ["sysadmin"]
      summary: "Get a list of all harbors from the server"
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/HarborInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    post:
      tags: ["sysadmin"]
      summary: "Create a new harbor on the server"
      requestBody:
        description: "Json containing the new harbor info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HarborInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /sysadmin/harbor/{harbor_id}:
    delete:
      tags: ["sysadmin"]
      summary: "Deletes a harbor from the server"
      parameters:
        - name: harbor_id
          in: path
          description: "ID of harbor to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: "Already deleted"
        '503':
          $ref: '#/components/responses/ServerBusy'

#------------------------------------------------------------------------------------------
#       A D M I N
#------------------------------------------------------------------------------------------
  /admin/course:
    post:
      tags: ["admin"]
      summary: "Set a new course for the race specified by race id"
      requestBody:
        description: "Holds the race and course info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInfo'
        required: true
      responses:
        '201':
          description: "Operation successfull"
        '409':
          description: "Already set"
        '503':
          $ref: '#/components/responses/ServerBusy'
  /admin/user/role:
    put:
      tags: ["admin"]
      summary: "Change user role"
      requestBody:
        description: "User to change role for and role to change to"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInfo'
        required: true
      responses:
        '201':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /admin/race/status:
    put:
      tags: ["admin"]
      summary: "Changes the status of a race"
      requestBody:
        description: "Data containing the status"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RaceStatus'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /admin/race/result{race_id}:
    post:
      tags: ["admin"]
      summary: "Counts the result for a race and populates the race table"
      parameters:
        - name: race_id
          in: path
          description: "ID of race to count result for"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '405':
          description: "Not allowed, race result not countable? (not finished?)"
        '503':
          $ref: '#/components/responses/ServerBusy'
#------------------------------------------------------------------------------------------
#       S E A S O N
#------------------------------------------------------------------------------------------
  /season:
    get:
      tags: [season]
      summary: "Returns all the seasons from the db"
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/SeasonInfo'
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    post:
      tags: [season]
      summary: "Adds a new season to the db"
      requestBody:
        description: "Json containing a list of race_id and season info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeasonInfo'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /season{season_id}:
    delete:
      tags: ["season"]
      summary: "Deletes a season from the server"
      parameters:
        - name: season_id
          in: path
          description: "ID of season to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /season/update{season_id}{race_id}:
    post:
      tags: ["season"]
      summary: "Adds a race to a season"
      parameters:
        - name: season_id
          in: path
          description: "ID of season to add a race to"
          required: true
          schema:
            type: integer
            format: int64
        - name: race_id
          in: path
          description: "ID of race to add to the season"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    delete:
      tags: ["season"]
      summary: "Deletes a race from a season"
      parameters:
        - name: season_id
          in: path
          description: "ID of season to delete a race from"
          required: true
          schema:
            type: integer
            format: int64
        - name: race_id
          in: path
          description: "ID of race to delete from the season"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /season/summary{season_id}:
    get:
      tags: ["season"]
      summary: "Get the sum of result for a whole season from the server"
      parameters:
        - name: season_id
          in: path
          description: "Id for a season"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/SeasonResult'
        '400':
          description: "Not found"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /season/race{race_id}:
    get:
      tags: ["season"]
      summary: "Get result for a race from the server, returns list of RaceResult"
      parameters:
        - name: race_id
          in: path
          description: "Id of race to return result for"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RaceResult'
        '400':
          description: "Not found"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
#------------------------------------------------------------------------------------------
# COMPONENTS
#------------------------------------------------------------------------------------------
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    UserInfo:
      type: object
      properties:
        name:
          type: string
          description: "John Doe"
        email:
          type: string
          description: "helllo@world.com"
        phone:
          type: string
          description: "0701-234 567"
          default: ""
        role:
          type: string
          description: "defines the user role, which is user, admin or root"
          default: "USER"
        salt:
          description: "Ac5T6hu8TrriP, Can be seen as one time password"
          type: string
    LoginInfo:
      type: object
      properties:
        email:
          type: string
          description: "helllo@world.com"
        password:
          type: string
          description: "the password"
    BoatInfo:
      type: object
      properties:
        skipper_name:
          type: string
          description: "John Doe"
        type:
          type: string
          description: "Banner_30"
        name:
          type: string
          description: "Freedom"
          default: "Not set"
        sail_number:
          type: string
          description: "SWE 49"
        srs_default:
          type: integer
          description: "0.923"
        srs_no_flying:
          type: integer
          description: "0.901"
          default: 0
        srs_shorthand:
          type: integer
          description: "0.912"
          default: 0
        srs_short_no_flying:
          type: integer
          description: "0.890"
          default: 0
    GpsPosition:
      type: object
      properties:
        longitude:
          type: string
          description: "12.4364376"
        latitude:
          type: string
          description: "55.2354356"
    StartLineInfo:
      type: object
      properties:
        startline_name:
          type: string
          description: "The name of the start line"
        harbor_id:
          type: integer
          description: "id of harbor"
        position_start_flag:
          type: object
          allOf:
            - $ref: '#/components/schemas/GpsPosition'
        position_signal_boat:
          type: object
          allOf:
            - $ref: '#/components/schemas/GpsPosition'
        position_first_mark:
          type: object
          allOf:
            - $ref: '#/components/schemas/GpsPosition'
    RaceHeader:
      type: object
      properties:
        race_id:
          type: integer
          description: "1"
        name:
          type: string
          description: "Lagunens Onsdagsrace"
        harbor:
          type: string
          description: "Harbor where the race is hold"
        date:
          type: string
          description: "2024-01-25"
        start_time:
          type: string
          description: "17:23:29"
        stop_time:
          type: string
          description: "17:23:29"
    RaceDetails:
      type: object
      properties:
        description:
          type: string
          description: "some description about the race"
        course:
          type: string
          description: "R1-G6-R7-M"
        status:
          type: string
          description: "See enum in db: race_status"
          default: CREATED
        race_type:
          type: string
          description: "5-4-1-0"
        wind_direction:
          type: integer
          description: "wind direction in degrees (0-359)"
        wind_strength:
          type: integer
          description: "wind strength in knots"
        course_set_by:
          type: string
          description: "Bela"
    Race:
      type: object
      properties:
        race_header:
          description: "Defines the start/end time of the race and holds the race id"
          type: object
          allOf:
            - $ref: '#/components/schemas/RaceHeader'
        race_details:
          description: "Defines details of the race"
          type: object
          allOf:
            - $ref: '#/components/schemas/RaceDetails'
        startline:
          description: "Defines the startline"
          type: object
          allOf:
            - $ref: '#/components/schemas/StartLineInfo'
    RaceIn:
      type: object
      properties:
        race_header:
          description: "Defines the start/end time of the race and holds the race id"
          type: object
          allOf:
            - $ref: '#/components/schemas/RaceHeader'
        description:
          type: string
          description: "Description of the race"
        start_line:
          type: integer
          description: "Id of the start line, should be the primary key in db"
        race_type:
          type: string
          description: "Type of the race, e.g 5-4-2-1"
    TimeInfo:
      type: object
      properties:
        race_id:
          type: integer
        time:
          type: string
          description: "13:12:11.12"
    JoinInfo:
      type: object
      properties:
        race_id:
          type: integer
        srs_type:
          type: string
          description: "See enum in db: sailrace.srs_type "
    Status:
      type: object
      properties:
        race_id:
          type: integer
        server_time:
          type: string
          description: "13:12:11.12"
        status:
          type: string
          description: "See enum in race table for db"
        course:
          type: string
          description: "R1-G6-R7-M"
    RaceResult:
      type: object
      properties:
        id:
          type: integer
          description: "primary key"
        race_id:
          type: integer
          description: "Id of the race"
        rank:
          type: integer
          description: "position in the race"
        status:
          type: string
          description: "Status as DNF or DSQ"
        skipper_name:
          type: string
          description: "Name"
        boat_name:
          type: string
          description: "Name"
        boat_type:
          type: string
          description: "Type"
        elapsed_time:
          type: string
          description: "Race duration for this boat"
        corrected_time:
          type: string
          description: "Corrected time after taking srs in account"
        time_behind:
          type: string
          description: "time behind the previouse competitor"
        srs_used:
          type: integer
          description: "srs value"
    RoleInfo:
      properties:
        user_id:
          type: integer
          description: "User id to change role for"
        role:
          type: string
          description: "Role to change to"
    CourseInfo:
      properties:
        race_id:
          type: integer
          description: "Race id for race to set course for"
        course:
          type: string
          description: "The course to set"
        wind_direction:
          type: integer
          description: "Wind direction in degrees (0 - 360)"
        wind_strength:
          type: integer
          description: "Wind strength in knots"
    RaceStatus:
      properties:
        race_id:
          type: integer
          description: "Race id to change status for"
        status:
          type: string
          description: "status of the race, see enum in DB"
    HarborInfo:
      properties:
        harbor_id:
          type: integer
          description: "Id of the harbor"
        harbor_name:
          type: string
          description: "name of the harbor"
        city:
          type: string
          description: "City of the harbor"
    SeasonInfo:
      properties:
        season_id:
          type: integer
          description: "Season id"
        season_name:
          type: string
          description: "Name/Title of the season, e.g.: Lagunens Onsdagsrace, Season 2024"
        season_description:
          type: string
          description: "Description of the season"
        season_start:
          type: string
          description: "Start date of the season"
        season_end:
          type: string
          description: "End date of the season"
        race:
          type: array
          items:
            type: integer
            examples: [2, 4, 6, 8]
          description: "Id of all races included in this season"
    Lines:
      properties:
        skipper:
          type: string
          description: "Name of the skipper"
        boat_name:
          type: string
          description: "Name of the boat"
        boat_type:
          type: string
          description: "Type of the boat"
        sail_number:
          type: string
          description: "Sail number of the boat"
        total:
          type: integer
          description: "The total points for this season"
        races:
          type: array
          items:
            type: integer
            examples: [1, 2, 3, 4]
          description: "List of the race id's included in the season"
    SeasonResult:
      properties:
        season_id:
          type: integer
          description: "season id"
        season_name:
          type: string
          description: "IDescribes the season"
        season_description:
          type: string
          description: "Description of the season"
        season_start:
          type: string
          description: "Date when the season starts"
        season_end:
          type: string
          description: "Date when the season ends"
        lines:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/Lines'
  responses:
    UnauthorizedError:
      description: "Access token is missing or invalid"
    ServerBusy:
      description: "Server busy, please try again later"
security:
  - bearerAuth: []         # use the same name as above

#https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml
#https://editor-next.swagger.io/
