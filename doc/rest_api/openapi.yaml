openapi: "3.1.0"
info:
  title: SailRaceSignalAPI
  contact:
    email: burszan@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2.8.0"
# TODO: set later....
#  servers:
#  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: "Operations about user"
  - name: signal
    description: "Everything about the signal"
#------------------------------------------------------------------------------------------
paths:
#------------------------------------------------------------------------------------------
#        U S E R
#------------------------------------------------------------------------------------------
  /user:
    get:
      tags: ["user"]
      summary: "Get user info from the SailRace server"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: "Not found, registered?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    put:
      tags: ["user"]
      summary: "Update a user on the SailRace server"
      requestBody:
        description: "User and login info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '200':
          description: "OK"
        '400':
          description: "Bad data to set"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    post:
      tags: ["user"]
      summary: "Register/create a new user on the SailRace server"
      description: |
        INSERT INTO user_info (name, email, phone, salt) VALUES (:name, :email, :phone, :salt)
      security: []   # No security
      requestBody:
        description: "User and login info"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '201':
          description: "Created"
          content:
            text/plain:
              schema:
                description: "User Id, e.g.: 12"
                type: integer
        '400':
          description: "Invalid data, missing something?"
        '409':
          description: "Already registered"
        '500':
          description: "Mail service down"
        '503':
          $ref: '#/components/responses/ServerBusy'
    delete:
      tags: ["user"]
      summary: "Deletes an user from the server. Note: user_id is read from token."
      description: |
        DELETE FROM user_info WHERE id=`id`
      responses:
        '200':
          description: "OK"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: "Already deleted"
        '503':
          $ref: '#/components/responses/ServerBusy'
  /user/login:
    post:
      tags: ["user"]
      summary: "Login as registered user to the SailRace server"
      security: []   # No security
      requestBody:
        description: "Login info, which is email and password"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
        required: true
      responses:
        '200':
          description: "OK"
          content:
            text/plain:
              schema:
                description: "8721dab27ec8df21fa4ec31d997f2ac6, JWT Token, including the user id as primary key in the db"
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
  /user/reset{email}:
    post:
      tags: ["user"]
      summary: "Reset password, new pass sends to email address"
      security: []   # No security
      parameters:
        - name: email
          in: path
          description: "E-mail of user to reset password for"
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, wrong email?"
        '503':
          $ref: '#/components/responses/ServerBusy'
#------------------------------------------------------------------------------------------
#       S I G N A L
#------------------------------------------------------------------------------------------
  /signal:
    put:
      tags: ["signal"]
      summary: "Add signal info to server"
      description: |
        INSERT INTO signal (user_id, type, name, sail_number, srs_shorthand_no_spin,\
         srs_shorthand, srs_no_spin, srs, skipper_name) \
        VALUES (:user_id, :type, :name, :sail_number, :srs_shorthand_no_spin,\
         :srs_shorthand, :srs_no_spin, :srs, :skipper_name)
# FIX sql...      
      requestBody:
        description: "Signal information"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signal'
        required: true
      responses:
        '200':
          description: "Operation successfull"
        '400':
          description: "Invalid data, missing something?"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'
    get:
      tags: ["signal"]
      summary: "Get signals info from the server"
      description: |
        SELECT * FROM signal
      responses:
        '200':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Signal'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '503':
          $ref: '#/components/responses/ServerBusy'

#------------------------------------------------------------------------------------------
# COMPONENTS
#------------------------------------------------------------------------------------------
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    UserInfo:
      type: object
      properties:
        name:
          type: string
          description: "John Doe"
        email:
          type: string
          description: "helllo@world.com"
        phone:
          type: string
          description: "0701-234 567"
          default: ""
        role:
          type: string
          description: "defines the user role, which is user, admin or root"
          default: "USER"
        salt:
          description: "Ac5T6hu8TrriP, Can be seen as one time password"
          type: string
    LoginInfo:
      type: object
      properties:
        email:
          type: string
          description: "helllo@world.com"
        password:
          type: string
          description: "the password"
    Signal:
# FIX json
      type: object
      properties:
        skipper_name:
          type: string
          description: "John Doe"
        type:
          type: string
          description: "Banner_30"
        name:
          type: string
          description: "Freedom"
          default: "Not set"
        sail_number:
          type: string
          description: "SWE 49"
        srs_default:
          type: integer
          description: "0.923"
        srs_no_flying:
          type: integer
          description: "0.901"
          default: 0
        srs_shorthand:
          type: integer
          description: "0.912"
          default: 0
        srs_short_no_flying:
          type: integer
          description: "0.890"
          default: 0
  responses:
    UnauthorizedError:
      description: "Access token is missing or invalid"
    ServerBusy:
      description: "Server busy, please try again later"
security:
  - bearerAuth: []         # use the same name as above

#https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml
#https://editor-next.swagger.io/
